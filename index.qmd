# Preface {.unnumbered}

```{r}
#| echo: false
source("_common.R")
```

This long-form vignette describes some of the functionality of the
`epipredict` R package, with an eye toward creating various types of
forecasters, from simple baselines to more elaborate customizations.

## Installation

The following commands install the latest versions of the packages we use in this book:

```{r, eval = FALSE}
# install.packages("pak")

# Install our packages from GitHub:
pak::pkg_install("cmu-delphi/epidatr")
pak::pkg_install("cmu-delphi/epiprocess@dev")
pak::pkg_install("cmu-delphi/epipredict")
# Other data processing and example data packages we use in this book:
pak::pkg_install("tidyverse")
pak::pkg_install("modeldata")
# Other model-fitting packages we use in this book (via epipredict):
pak::pkg_install("ranger")
pak::pkg_install("xgboost")
```

<details> <summary> Encountering installation issues?  Click here to show some potential solutions. </summary>

### Linux installation issues: compilation errors or slowness

If you are using Linux and encounter any compilation errors above, or if
compilation is taking very long, you might try using the RStudio (now called
Posit) Package Manager to install binaries. You can try running this command

```{r, eval = FALSE}
options(
  repos = c(
    # contains binaries for Linux:
    RSPM = "https://packagemanager.rstudio.com/all/latest",
    # backup CRAN mirror of your choice:
    CRAN = "https://cran.rstudio.com/"
  )
)
```

### Reproducibility

The above commands will give you the current versions of the packages used in
this book. If you're having trouble reproducing some of the results, it may be
due to package updates that took place after the book was last updated. You can
try matching the package versions we used to build the book by one of the
following methods. You may be required to obtain a [GitHub Personal Access
Token](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens)
and store it in the environment variable `"GITHUB_PAT"`.

#### A: Download and use the `renv.lock`

```{r, eval = FALSE}
# Run this once:
install.packages("renv")
download.file("https://raw.githubusercontent.com/cmu-delphi/delphi-tooling-book/main/renv.lock", "delphi-tooling-book.renv.lock")
# Run this every session you'd like to use this set of versions:
renv::use(lockfile = "delphi-tooling-book.renv.lock")
```

#### B: Download the book and use its `.Rprofile`

1. Download the book [here](https://github.com/cmu-delphi/delphi-tooling-book/archive/refs/heads/main.zip) and unzip it.
2. Launch R inside of the top-level directory; there should be a `.Rprofile` file there that takes care of loading the appropriate versions of all the packages used.

### Other issues

Please let us know!  You can file an issue with the book [here](https://github.com/cmu-delphi/delphi-tooling-book/issues), or with one of the individual packages at their own issue pages: [epidatr](https://github.com/cmu-delphi/epidatr/issues), [epiprocess](https://github.com/cmu-delphi/epiprocess/issues), [epipredict](https://github.com/cmu-delphi/epipredict/issues).

</details>

## Documentation

You can view the complete documentation for the package at <https://cmu-delphi.github.io/epipredict>.



## Goals for `epipredict`

**We currently provide:**

1. A set of basic, easy-to-use forecasters that work out of the box. You can do a reasonable amount of customization on them. For the basic forecasters, we currently provide: 
    * Baseline flat-line forecaster 
    * Autoregressive forecaster
    * Autoregressive (multinomial) classifier
2. A framework for creating custom forecasters out of modular components. There are four types of components:
    * Preprocessor: do things to the raw data before model training that should be reproduced at test time.
    * Trainer: train a model on data, resulting in a fitted model object
    * Predictor: make predictions, using a fitted model object
    * Postprocessor: do things to the predictions before returning

**Target audiences:**

* Basic. Has data, calls forecaster with default arguments.
* Intermediate. Wants to examine changes to the arguments, take advantage of some built in flexibility.
* Advanced. Wants to write their own forecasters. Maybe willing to build up from some components that we write. 

Even the Advanced user should find their task to be relatively easy. Examples of these tasks are illustrated in the [vignettes and articles](https://cmu-delphi.github.io/epipredict).

## Intermediate example

The package comes with some built-in historical data for illustration, but
up-to-date versions of this could be downloaded with the [`{covidcast}` package](https://cmu-delphi.github.io/covidcast/covidcastR/index.html) and processed using [`{epiprocess}`](https://cmu-delphi.github.io/epiprocess/).[^index1]

[^index1]: COVIDcast data and other epidemiological signals for non-Covid related illnesses are available with [`{epidatr}`](https://cmu-delphi.github.io/epidatr), which interfaces directly to Delphi's [Epidata API](https://cmu-delphi.github.io/delphi-epidata/).

```{r epidf, message=FALSE}
library(epipredict)
jhu <- case_death_rate_subset
jhu
```

To create and train a simple auto-regressive forecaster to predict the death rate two weeks into the future using past (lagged) deaths and cases, we could use the following function.

```{r make-forecasts, warning=FALSE}
two_week_ahead <- arx_forecaster(
  jhu, 
  outcome = "death_rate", 
  predictors = c("case_rate", "death_rate"),
  args_list = arx_args_list(
    lags = list(c(0, 1, 2, 3, 7, 14), c(0, 7, 14)),
    ahead = 14
  )
) 
```

In this case, we have used a number of different lags for the case rate, while only using 3 weekly lags for the death rate (as predictors). The result is both a fitted model object which could be used any time in the future to create different forecasts, as well as a set of predicted values (and prediction intervals) for each location 14 days after the last available time value in the data.

```{r print-model}
two_week_ahead$epi_workflow
```

The fitted model here involved preprocessing the data to appropriately generate lagged predictors, estimating a linear model with `stats::lm()` and then postprocessing the results to be meaningful for epidemiological tasks. We can also examine the predictions.

```{r show-preds}
two_week_ahead$predictions
```

The results above show a distributional forecast produced using data through the end of 2021 for the 14th of January 2022. A prediction for the death rate per 100K inhabitants is available for every state (`geo_value`) along with a 90% predictive interval. The figure below
displays the forecast for a small handful of states. The vertical black line is the forecast date. The forecast doesn't appear to be particularly good, but our choices above were intended to be illustrative of the functionality rather than optimized for accuracy.

```{r, echo=FALSE}
samp_geos <- c("ca", "co", "ny", "pa")

hist <- jhu %>% 
  filter(geo_value %in% samp_geos,
         time_value >= max(time_value) - 90L)
preds <- two_week_ahead$predictions %>% 
  filter(geo_value %in% samp_geos) %>% 
  mutate(q = nested_quantiles(.pred_distn)) %>% 
  unnest(q) %>%
  pivot_wider(names_from = tau, values_from = q)

ggplot(hist, aes(color = geo_value)) +
  geom_line(aes(time_value, death_rate)) +
  theme_bw() +
  geom_errorbar(data = preds, aes(x = target_date, ymin = `0.05`, ymax = `0.95`)) +
  geom_point(data = preds, aes(target_date, .pred)) +
  geom_vline(data = preds, aes(xintercept = forecast_date)) +
  scale_colour_viridis_d(name = "") +
  scale_x_date(date_labels = "%b %Y") +
  theme(legend.position = "bottom") +
  labs(x = "", y = "Incident deaths per 100K\n inhabitants")
```

## Contents

The remainder of this book examines this software in more detail, illustrating some of the flexibility that is available.


```{r include=FALSE}
# automatically create a bib database for R packages
knitr::write_bib(c(.packages()), 'packages.bib')
```
