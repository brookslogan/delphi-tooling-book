# Preface {.unnumbered}

```{r}
#| echo: false
source("_common.R")
```

This long-form vignette describes some of the functionality of the
`{epiprocess}` and `{epipredict}` R packages, with an eye toward creating various types of
forecasters --- from simple baselines to more elaborate customizations.

## Installation

You can install the development versions of of these packages from [GitHub](https://github.com/) with:

```{r}
#| eval: false
# install.packages("remotes")
remotes::install_github("cmu-delphi/epiprocess")
remotes::install_github("cmu-delphi/epipredict")
```

Much of the data used for illustration can be loaded directly from [Delphi's Epidata API](https://cmu-delphi.github.io/delphi-epidata/) which is built and maintained by the Carnegie Mellon University [Delphi research group](https://delphi.cmu.edu/). We have tried to provide most of the data used in these examples in a separate package, `{epidatasets}`, but much of it can also be accessed using `{epidatr}`, an R interface to the API. These are also available from GitHub:

```{r}
#| eval: false
remotes::install_github("cmu-delphi/epidatasets")
remotes::install_github("cmu-delphi/epidatr")
```


## Documentation

You can view the complete documentation for these packages at 

* <https://cmu-delphi.github.io/epipredict>,
* <https://cmu-delphi.github.io/epiprocess>,
* <https://cmu-delphi.github.io/epidatasets>,
* <https://cmu-delphi.github.io/epidatr>.



## Quick-start example

The package comes with some built-in historical data for illustration, but
up-to-date versions of this could be downloaded with the [`{covidcast}` package](https://cmu-delphi.github.io/covidcast/covidcastR/index.html) and processed using [`{epiprocess}`](https://cmu-delphi.github.io/epiprocess/).[^index1]

[^index1]: As mentioned above, COVIDcast data and other epidemiological signals for non-Covid related illnesses are available with [`{epidatr}`](https://cmu-delphi.github.io/epidatr), which interfaces directly to Delphi's [Epidata API](https://cmu-delphi.github.io/delphi-epidata/).

```{r epidf, message=FALSE}
library(epipredict)
jhu <- case_death_rate_subset
jhu
```

To create and train a simple auto-regressive forecaster to predict the death rate two weeks into the future using past (lagged) deaths and cases, we could use the following function.

```{r make-forecasts, warning=FALSE}
two_week_ahead <- arx_forecaster(
  jhu, 
  outcome = "death_rate", 
  predictors = c("case_rate", "death_rate"),
  args_list = arx_args_list(
    lags = list(case_rate = c(0, 1, 2, 3, 7, 14), death_rate = c(0, 7, 14)),
    ahead = 14
  )
) 
```

In this case, we have used a number of different lags for the case rate, while only using 3 weekly lags for the death rate (as predictors). The result is both a fitted model object which could be used any time in the future to create different forecasts, as well as a set of predicted values (and prediction intervals) for each location 14 days after the last available time value in the data.

```{r print-model}
two_week_ahead$epi_workflow
```

The fitted model here involved preprocessing the data to appropriately generate lagged predictors, estimating a linear model with `stats::lm()` and then postprocessing the results to be meaningful for epidemiological tasks. We can also examine the predictions.

```{r show-preds}
two_week_ahead$predictions
```

The results above show a distributional forecast produced using data through the end of 2021 for the 14th of January 2022. A prediction for the death rate per 100K inhabitants is available for every state (`geo_value`) along with a 90% predictive interval. The figure below
displays the forecast for a small handful of states. The vertical black line is the forecast date. The forecast doesn't appear to be particularly good, but our choices above were intended to be illustrative of the functionality rather than optimized for accuracy.

```{r}
#| code-fold: true
samp_geos <- c("ca", "co", "ny", "pa")

hist <- jhu %>% 
  filter(geo_value %in% samp_geos,
         time_value >= max(time_value) - 90L)
preds <- two_week_ahead$predictions %>% 
  filter(geo_value %in% samp_geos) %>% 
  mutate(q = nested_quantiles(.pred_distn)) %>% 
  unnest(q) %>%
  pivot_wider(names_from = tau, values_from = q)

ggplot(hist, aes(color = geo_value)) +
  geom_line(aes(time_value, death_rate)) +
  theme_bw() +
  geom_errorbar(data = preds, aes(x = target_date, ymin = `0.05`, ymax = `0.95`)) +
  geom_point(data = preds, aes(target_date, .pred)) +
  geom_vline(data = preds, aes(xintercept = forecast_date)) +
  scale_colour_viridis_d(name = "") +
  scale_x_date(date_labels = "%b %Y") +
  theme(legend.position = "bottom") +
  labs(x = "", y = "Incident deaths per 100K\n inhabitants")
```

## Contents

The remainder of this book examines this software in more detail, illustrating some of the flexibility that is available.


```{r include=FALSE}
# automatically create a bib database for R packages
knitr::write_bib(c(.packages()), 'packages.bib')
```
